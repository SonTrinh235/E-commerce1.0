import React, { useState } from "react";
import "./CSS/LoginSignup.css";
import { auth } from "../firebase";
import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";

let recaptchaVerifier = null;

const LoginSignup = () => {
  const [role, setRole] = useState(null); // user | admin
  const [step, setStep] = useState("phone"); // phone | otp
  const [phone, setPhone] = useState("");
  const [otp, setOtp] = useState("");
  const [confirmationResult, setConfirmationResult] = useState(null);
  const [adminCode, setAdminCode] = useState("");
  const [adminPass, setAdminPass] = useState("");

  const [adminLoading, setAdminLoading] = useState(false);
  const [adminError, setAdminError] = useState("");

  const [showProfilePopup, setShowProfilePopup] = useState(false);
  const [fullName, setFullName] = useState("");
  const [address, setAddress] = useState("");

  const handleSaveProfile = async () => {
    if (!fullName || !address) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    const token = localStorage.getItem("userToken");
    try {
      const res = await fetch("https://www.bachkhoaxanh.xyz/user/updateProfile", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ fullName, address }),
      });

      const json = await res.json();
      if (json.success) {
        // C·∫≠p nh·∫≠t ngay localStorage ƒë·ªÉ Navbar hi·ªÉn th·ªã t√™n m·ªõi
        try {
          const old = JSON.parse(localStorage.getItem("userInfo") || "{}");
          const updated = {
            ...old,
            user: {
              ...(old?.user || {}),
              displayName: fullName, // map fullName -> displayName ƒë·ªÉ UI d√πng ƒë·ªìng nh·∫•t
              address,
            },
          };
          localStorage.setItem("userInfo", JSON.stringify(updated));
          window.dispatchEvent(new Event("auth-changed"));
        } catch {}

        alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
        setShowProfilePopup(false);
        window.location.href = "/";
      } else {
        alert("L·ªói c·∫≠p nh·∫≠t: " + (json.message || "Kh√¥ng r√µ l·ªói"));
      }
    } catch (e) {
      alert("L·ªói m·∫°ng khi c·∫≠p nh·∫≠t h·ªì s∆°!");
      console.error(e);
    }
  };

  // --- Setup Recaptcha ---
  const setupRecaptcha = () => {
    if (!recaptchaVerifier) {
      recaptchaVerifier = new RecaptchaVerifier(auth, "recaptcha-container", {
        size: "invisible",
        callback: () => console.log("reCAPTCHA passed"),
        "expired-callback": () => console.warn("reCAPTCHA expired"),
      });
    }
    return recaptchaVerifier;
  };

  // --- X·ª≠ l√Ω user ƒëƒÉng nh·∫≠p ---
  const handleUserContinue = async () => {
    if (step === "phone") {
      if (phone.trim().length < 9) {
        alert("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá!");
        return;
      }

      if (!/^(\+84|0)\d{8,9}$/.test(phone.trim())) {
        alert("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá!");
        return;
      }
      
      try {
        const appVerifier = setupRecaptcha();
        const phoneNumber = phone.startsWith("+")
          ? phone
          : "+84" + phone.replace(/^0/, "");

        const result = await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
        setConfirmationResult(result);
        setStep("otp");
        alert("‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n!");
      } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i OTP:", error);
        alert("Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP: " + (error.message || error));
      }
    } else if (step === "otp") {
      if (otp.trim().length !== 6) {
        alert("Vui l√≤ng nh·∫≠p ƒë·ªß 6 ch·ªØ s·ªë OTP!");
        return;
      }

      try {
        if (!confirmationResult) {
          alert("‚ö†Ô∏è Phi√™n OTP kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i!");
          return;
        }

        const userCredential = await confirmationResult.confirm(otp);
        const user = userCredential.user;
        const idToken = await user.getIdToken();

        console.log("ü™™ Firebase ID Token:", idToken);
        console.log("üì± Phone number:", user.phoneNumber);
        console.log("üë§ UID:", user.uid);
        console.log("‚è± Token expires at:", new Date(user.stsTokenManager.expirationTime));

        alert(`üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${user.phoneNumber}`);

        const payload = {
          phoneNumber: user.phoneNumber,
          idToken,
          displayName: user.displayName || "",
          address: "",
        };

        const res = await fetch("https://www.bachkhoaxanh.xyz/user/auth", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });

        const json = await res.json();
        console.log("üì¶ API response:", json);

        if (json.success) {
          localStorage.setItem("userToken", json.data?.token || idToken);
          localStorage.setItem("userInfo", JSON.stringify(json.data || { phone: user.phoneNumber }));

          // Cho UI (Navbar...) c·∫≠p nh·∫≠t ngay
          window.dispatchEvent(new Event("auth-changed"));

          // user m·ªõi th√¨ hi·ªán popup nh·∫≠p th√¥ng tin
          if (json.data?.isNewUser) {
            setShowProfilePopup(true);
          } else {
            alert("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
            window.location.href = "/";
          }
        } else {
          alert("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: " + (json.message || "Kh√¥ng r√µ l·ªói"));
        }
      } catch (error) {
        console.error("‚ùå L·ªói x√°c minh OTP:", error);
        alert("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n! " + (error.message || ""));
      }
    }
  };

  // --- Admin login ---
  const handleAdminLogin = async () => {
    setAdminError("");
    if (!adminCode || !adminPass) {
      setAdminError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    try {
      setAdminLoading(true);

      const payload = { username: adminCode, password: adminPass };

      const res = await fetch("https://www.bachkhoaxanh.xyz/user/admin/signin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const json = await res.json();
      console.log("üîê Admin auth response:", json);

      if (json.success) {
        // Lu√¥n l∆∞u token truthy ƒë·ªÉ guard kh√¥ng fail n·∫øu server tr·∫£ "" (edge case)
        localStorage.setItem("adminToken", json.data?.token ?? "admin-session");
        localStorage.setItem("admin", JSON.stringify({ role: "admin", username: adminCode }));

        // B√°o UI c·∫≠p nh·∫≠t ngay (AdminNavbar, guard‚Ä¶)
        window.dispatchEvent(new Event("auth-changed"));

        alert("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng (Admin)");
        // Admin v·∫´n xem ƒë∆∞·ª£c store nh∆∞ user (public routes).
        // Chuy·ªÉn th·∫≥ng v√†o dashboard admin:
        window.location.href = "/admin/dashboard";
      } else {
        setAdminError(json.message || "Sai username ho·∫∑c m·∫≠t kh·∫©u");
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi g·ªçi API admin:", err);
      setAdminError(err.message || "L·ªói m·∫°ng ho·∫∑c server");
    } finally {
      setAdminLoading(false);
    }
  };

  // --- Quay l·∫°i ---
  const handleBack = () => {
    if (role === "user" && step === "otp") {
      setStep("phone");
      setOtp("");
    } else {
      setRole(null);
      setPhone("");
      setOtp("");
      setAdminCode("");
      setAdminPass("");
      setConfirmationResult(null);
      setAdminError("");
    }
  };

  return (
    <div className="loginsignup">
      <div className="loginsignup-container">
        <h1>ƒêƒÉng nh·∫≠p</h1>

        {!role ? (
          <>
            <p className="choose-role-text">Ch·ªçn lo·∫°i t√†i kho·∫£n:</p>
            <button onClick={() => setRole("user")}>Ng∆∞·ªùi d√πng</button>
            <button onClick={() => setRole("admin")}>Qu·∫£n tr·ªã vi√™n (Admin)</button>
          </>
        ) : role === "user" ? (
          <>
            <h3 style={{ textAlign: "center", marginTop: "10px" }}>ƒêƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i</h3>

            {step === "phone" ? (
              <>
                <div className="loginsignup-fields">
                  <input
                    type="text"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                  />
                </div>
                <button onClick={handleUserContinue}>G·ª≠i m√£ OTP</button>
                <div id="recaptcha-container"></div>
              </>
            ) : (
              <>
                <p className="otp-info">
                  M√£ OTP ƒë√£ g·ª≠i t·ªõi <b>{phone}</b>
                </p>
                <div className="loginsignup-fields">
                  <input
                    type="text"
                    placeholder="Nh·∫≠p OTP (6 ch·ªØ s·ªë)"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    maxLength={6}
                  />
                </div>
                <button onClick={handleUserContinue}>X√°c nh·∫≠n OTP</button>
              </>
            )}

            <button className="back-btn" onClick={handleBack}>
              ‚Üê Quay l·∫°i
            </button>
          </>
        ) : (
          <>
            <h3 style={{ textAlign: "center", marginTop: "10px" }}>ƒêƒÉng nh·∫≠p Qu·∫£n tr·ªã vi√™n</h3>
            <div className="loginsignup-fields">
              <input
                type="text"
                placeholder="T√™n ƒëƒÉng nh·∫≠p"
                value={adminCode}
                onChange={(e) => setAdminCode(e.target.value)}
              />
              <input
                type="password"
                placeholder="M·∫≠t kh·∫©u"
                value={adminPass}
                onChange={(e) => setAdminPass(e.target.value)}
              />
            </div>

            {adminError && <p style={{ color: "red", marginBottom: "8px" }}>{adminError}</p>}

            <button onClick={handleAdminLogin} disabled={adminLoading}>
              {adminLoading ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
            </button>
            <button className="back-btn" onClick={handleBack}>
              ‚Üê Quay l·∫°i
            </button>
          </>
        )}

        <div className="loginsignup-agree">
          <p>
            B·∫±ng vi·ªác ti·∫øp t·ª•c, b·∫°n ƒë·ªìng √Ω v·ªõi{" "}
            <span>ƒêi·ªÅu kho·∫£n d·ªãch v·ª•</span> v√† <span>Ch√≠nh s√°ch b·∫£o m·∫≠t</span>.
          </p>
        </div>
      </div>

      {/* Popup y√™u c·∫ßu ho√†n thi·ªán th√¥ng tin */}
      {showProfilePopup && (
        <div className="popup-overlay">
          <div className="popup">
            <h2>Ho√†n thi·ªán th√¥ng tin c√° nh√¢n</h2>
            <p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi ti·∫øp t·ª•c</p>
            <input
              type="text"
              placeholder="H·ªç v√† t√™n"
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
            />
            <input
              type="text"
              placeholder="ƒê·ªãa ch·ªâ"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
            />
            <button onClick={handleSaveProfile}>L∆∞u th√¥ng tin</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default LoginSignup;
